#!/bin/bash
set -eu -o pipefail
exec 3>&1 1>&2

jq . < /dev/stdin > /tmp/input

# Usage
#
# resource:
#   - name: jira-service-request
#     type: jira-service-request-resource
#     check_every: 20s
#     source:
#       jira_account: cycloid-demo
#       jira_user_email: olivier.deturckheim@cycloid.io
#       jira_user_token: 1234567890

jira_account=$(jq -r '.source.jira_account // empty' /tmp/input)
if [ -z "$jira_account" ]; then
  echo "JIRA account not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi
echo "Using JIRA account: $jira_account"

jira_user_email=$(jq -r '.source.jira_user_email // empty' /tmp/input)
if [ -z "$jira_user_email" ]; then
  echo "JIRA user email not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi
echo "Using JIRA user email: $jira_user_email"

jira_user_token=$(jq -r '.source.jira_user_token // empty' /tmp/input)
if [ -z "$jira_user_token" ]; then
  echo "JIRA user token not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi

org=$(jq -r '.source.org // empty' /tmp/input)
if [ -z "$org" ]; then
  echo "Cycloid env not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi
echo "Using Cycloid org: $org"

project=$(jq -r '.source.project // empty' /tmp/input)
if [ -z "$project" ]; then
  echo "Cycloid project not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi
echo "Using Cycloid project: $project"

env=$(jq -r '.source.env // empty' /tmp/input)
if [ -z "$env" ]; then
  echo "Cycloid env not provided:" >&2
  jq '.source // {}' /tmp/input >&2
  exit 1
fi
echo "Using Cycloid env: $env"

check_issue_key=$(jq -r '.version.ref // empty' /tmp/input | sed -e 's/"//g')
echo "Searching from JIRA issue key: $check_issue_key"

echo '[' >check

response=$(curl -u ${jira_user_email}:${jira_user_token} \
  -H 'Accept: application/json' \
  -X GET \
  --url https://${jira_account}.atlassian.net/rest/servicedeskapi/request)

for row_response in $(echo "${response}" | jq -r '.values[] | @base64'); do
  _jq() {
    echo $1 | base64 -d | jq -r $2
  }
  row=$(_jq $row_response '.')
  echo $row
  echo "---"
  jira_issue_key=$(_jq $row_response '.issueKey' | sed -e 's/"//g')

  echo '{ "ref": "IP-95" },' >>check

  org_match=0
  project_match=0
  env_match=0
  for row_requestFieldValues in $(_jq $row_response '.requestFieldValues[] | @base64'); do
    if [[ $(_jq $row_requestFieldValues '.label') == "org" && $(_jq $row_requestFieldValues '.value') == $org ]]; then
      org_match=1
    fi
    if [[ $(_jq $row_requestFieldValues '.label') == "project" && $(_jq $row_requestFieldValues '.value') == $project ]]; then
      project_match=1
    fi
    if [[ $(_jq $row_requestFieldValues '.label') == "env" && $(_jq $row_requestFieldValues '.value') == $env ]]; then
      env_match=1
    fi
  done

  if [[ $org_match -eq 1 && $project_match -eq 1 && $env_match -eq 1 ]]; then
    jq --null-input --compact-output --arg issueKey "$jira_issue_key" '{ "ref": "$issueKey" }' >>check
    echo -n ',' >>check
  fi
done

# Remove the last comma at the end of the JSON file if there was at least one entry
sed -i '$ s/,$//' check
# Remove the line feeds
sed -i ':a;N;$!ba;s/\n//g' check

echo ']' >>check
cat check
cat check >&3